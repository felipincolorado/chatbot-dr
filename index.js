// index.js

// -------------------
//  1. CONFIGURACI√ìN INICIAL
// -------------------

const express = require('express');
const { MessagingResponse } = require('twilio').twiml;
const app = express();
app.use(express.urlencoded({ extended: false }));

// -------------------
//  2. GESTI√ìN DE ESTADO
// -------------------
// Este objeto guardar√° el estado de cada usuario.
// NOTA: Este objeto se reinicia si el servidor se reinicia. Para una soluci√≥n m√°s permanente, se necesitar√≠a una base de datos.
const userStates = {};


// -------------------
//  3. TEXTOS Y RESPUESTAS DEL BOT
// -------------------

const responses = {
  menu: '¬øC√≥mo puedo ayudarte hoy? üòä Escribe el n√∫mero de la opci√≥n que deseas. \n\n1Ô∏è‚É£ Valor de la consulta\n2Ô∏è‚É£ Agendar una hora\n3Ô∏è‚É£ Medios de pago\n4Ô∏è‚É£ Informaci√≥n del M√©dico\n5Ô∏è‚É£ T√©rminos y condiciones\n6Ô∏è‚É£ Dejar un recado al doctor',

  opcion1: '¬°Claro! Le comento. El doctor Sebasti√°n es m√©dico general. La atenci√≥n es Teleconsulta y se realiza por Google Meet. El valor Fonasa es de 30 mil e Isapre 40 mil pesos. Como m√©dico general, en caso de que el paciente requiera reposo, solo puede otorgar 14 d√≠as como m√°ximo por consulta y en el caso de receta o receta cheque (extensi√≥n m√°xima de 3 meses por consulta), √©sta llega de forma digital al correo del paciente durante la atenci√≥n.',
  opcion2: '¬°Perfecto! Puedes agendar directamente en este enlace. ¬°Ser√° un gusto atenderte!\n\nüìÖ https://agendamiento.reservo.cl/makereserva/agenda/q0OWB6D0d0pBRf6L4Z64esF1k5i9N2',
  opcion3: 'Aceptamos pagos con tarjetas de d√©bito y cr√©dito luego de agendar tu hora. üí≥\n\n*Importante*: Al realizar el pago, usted acepta nuestros t√©rminos y condiciones (consulte la opci√≥n 5).',
  opcion4: 'El Dr. Aravena es m√©dico general, egresado de la Universidad de Concepci√≥n. Puedes verificar su registro profesional (N¬∫ 763509) aqu√≠: https://rnpi.superdesalud.gob.cl/',
  terminos: 'üìÑ *T√©rminos y Condiciones*\n\nLe informamos sobre nuestras pol√≠ticas de cancelaci√≥n y reembolso:\n\n‚Ä¢ Si anula su hora con m√°s de 24 horas de anticipaci√≥n, se le devolver√° el 90% del valor pagado.\n‚Ä¢ Si anula con menos de 24 horas de anticipaci√≥n, se le devolver√° el 50% del dinero.\n\nAl agendar y pagar su consulta, usted confirma que ha le√≠do y aceptado estos t√©rminos.',
  
  // Textos actualizados para el modo "recado" con la nueva l√≥gica.
  recado_inicio: 'Por supuesto. A partir de este momento, el asistente autom√°tico se pausar√° durante 8 horas para que puedas escribir con calma tu mensaje para el Dr. Aravena. No te interrumpir√©.\n\nSi deseas reactivarme antes, simplemente escribe la palabra *Myriam*.\n\nEl doctor revisar√° tu recado a la brevedad.',
  recado_fin: '¬°Hola de nuevo! El asistente autom√°tico est√° activo. Si necesitas algo m√°s, escribe "men√∫" para ver las opciones. üòä',

  gracias: '¬°De nada! Estoy para ayudarte. Si necesitas algo m√°s, no dudes en escribir "men√∫".'
};

responses.bienvenida = `¬°Hola! Soy Myriam üë©üèª, la asistente virtual del Dr. Aravena. ${responses.menu}`;
responses.error = `Disculpa, no entend√≠ muy bien tu mensaje. ${responses.menu}`;


// -------------------
//  4. L√ìGICA DEL WEBHOOK
// -------------------

app.post('/webhook', (req, res) => {
  const twiml = new MessagingResponse();
  const userId = req.body.From;
  const incomingMsg = (req.body.Body || '').toLowerCase().trim();
  const userState = userStates[userId];

  // ---- L√ìGICA DE MODO "RECADO" ----
  if (userState && userState.mode === 'recado') {
    const eightHours = 8 * 60 * 60 * 1000;
    const timeElapsed = Date.now() - userState.timestamp;

    // Condici√≥n para reactivar el bot: si el usuario escribe "myriam" O si ya pasaron las 8 horas.
    if (incomingMsg === 'myriam' || timeElapsed >= eightHours) {
      delete userStates[userId]; // Limpiamos el estado del usuario.
      twiml.message(responses.recado_fin);
      res.set('Content-Type', 'text/xml');
      return res.status(200).send(twiml.toString());
    } else {
      // Si no se cumple la condici√≥n de reactivaci√≥n, el bot se mantiene en silencio.
      // Registramos el mensaje en la consola para que el doctor lo pueda leer.
      console.log(`--- RECADO PARA EL DOCTOR (de ${userId}) ---`);
      console.log(`Mensaje: ${req.body.Body}`); // Guardamos el mensaje original.
      console.log(`------------------------------------------`);
      
      // Enviamos una respuesta vac√≠a para que Twilio no le conteste al usuario.
      return res.send('<Response/>');
    }
  }

  // ---- L√ìGICA DE MEN√ö EST√ÅNDAR ----
  let messageToSend;
  switch (incomingMsg) {
    case '1': messageToSend = responses.opcion1; break;
    case '2': messageToSend = responses.opcion2; break;
    case '3': messageToSend = responses.opcion3; break;
    case '4': messageToSend = responses.opcion4; break;
    case '5': messageToSend = responses.terminos; break;
    
    case '6':
      // Ponemos al usuario en modo "recado" y guardamos la hora de inicio.
      userStates[userId] = { mode: 'recado', timestamp: Date.now() };
      messageToSend = responses.recado_inicio;
      break;
      
    case 'hola':
    case 'buenos d√≠as':
    case 'men√∫':
      messageToSend = responses.bienvenida;
      break;
    
    case 'gracias':
    case 'muchas gracias':
      messageToSend = responses.gracias;
      break;

    default:
      messageToSend = responses.error;
      break;
  }

  twiml.message(messageToSend);
  res.set('Content-Type', 'text/xml');
  res.status(200).send(twiml.toString());
});


// -------------------
//  5. INICIAR EL SERVIDOR
// -------------------

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`El bot de Myriam est√° funcionando en el puerto ${PORT}`);
});